*complete_parameter* *CompleteParameter* *completeparameter* author: tenfyzhong

This help file explains the CompleteParameter Vim Plugin. 

================================================================================
Contents:
0. Introduction -------------------------------- |complete-parameter-introduction|
1. Install ------------------------------------- |complete-parameter-install|
2. Usage --------------------------------------- |complete-parameter-usage|
3. Mapping ------------------------------------- |complete-parameter-mapping|
4. Options ------------------------------------- |complete-parameter-options|
5. Event --------------------------------------- |complete-parameter-event|
6. Writing Extensions -------------------------- |complete-parameter-extensions|
7. FAQ ----------------------------------------- |complete-parameter-faq|
8. Contributions ------------------------------- |complete-parameter-contributes|
9. Thanks -------------------------------------- |complete-parameter-thanks|
10. LICENSE ------------------------------------ |complete-parameter-license|


================================================================================
Introduction                                     *complete-parameter-introduction*

CompletEparameter is a plugin for complete function's parameters after complete
a function.  

- Complete parameters after select a complete item from the completion popup menu. 
- After complete the parameters, jump to the first parameter and the select it. 
- `<c-j>`(default mapping) to jump to the next parameter in any position. 
- `<c-k>`(default mapping) to jump to the previous parameter in any position. 
- `<m-d>`(default mapping) select next overload function parameters. Only cpp now.
- `<m-u>`(default mapping) select previous overload function parameters. Only cpp now


================================================================================
1. Install                                            *complete-parameter-install*
I suggest you to use a plugin manager, such vim-plug or other.
- [vim-plug](https://github.com/junegunn/vim-plug) >
  Plug 'tenfyzhong/CompleteParameter.vim' 
<

- Manual >
  git clone https://github.com/tenfyzhong/CompleteParameter.vim.git ~/.vim/bundle/CompleteParameter.vim
  echo 'set rtp+=~/.vim/bundle/CompleteParameter.vim' >> ~/.vimrc
  vim -c 'helptag ~/.vim/bundle/CompleteParameter.vim/doc' -c qa!
<
================================================================================
2. Usage                                                *complete-parameter-usage*
Install a complete engine we have supported. Goto the complete item of the
completion popup menu you want to select, and then type `(`(default mapping), 
the parameters will be completed and jump the the first parameter. The first 
completion item will be seleted if no one selected and the input is equal to 
the first popup item after you type `(`. 
`<c-j>`/`<c-k>`(default mapping) will jump to the next/previous parameter 
and select it. 

================================================================================
3. Mapping                                            *complete-parameter-mapping*
* (                                                                            *(*
Mapping type: inoremap
Call the parameter completor. 

* <c-j>                                                                    *<c-j>*
Mapping type: inoremap,nnoremap,vnoremap
Goto the next parameter and select it.

* <c-k>                                                                    *<c-k>*
Mapping type: inoremap,nnoremap,vnoremap
Goto the previous parameter and select it.

* <m-d>                                                                    *<m-d>*
Mapping type: inoremap,nnoremap,vnoremap
Select the next overload function. 

* <m-u>                                                                    *<m-u>*
Mapping type: inoremap,nnoremap,vnoremap
Select the previous overload function. 

================================================================================
4. Options                                            *complete-parameter-options*
                                           *g:complete_parameter_mapping_complete*
* `g:complete_parameter_mapping_complete`
This option set the complete mapping. When you are in a complete item of the 
completion popup menu, type this mapping, it'll complete the parameters.   
Default: '('  >
  let g:complete_parameter_mapping_complete = '('
<
                                              *g:complete_parameter_failed_insert*
* g:complete_parameter_failed_insert
This option set the complete text when the parameter complete failed. 
Default: '()'  >
  let g:complete_parameter_failed_insert = '()'
<
                                    *g:complete_parameter_mapping_complete_for_ft*
* g:complete_parameter_mapping_complete_for_ft
This option set the complete mapping for special typefile. By default, the 
complete mapping is the `g:complete_parameter_mapping_complete` value. But 
you can define other key for a special. For example, you can set the cpp 
complete mapping to `(` and `<`. This option is a map, the key of the map
is filetype, the value is a map too.  The key of the value map is the 
complete mapping key, the value is a string when fail to call the complete. 
Default: {'cpp': {'(': '()', '<': '<'} }  >
  let g:complete_parameter_mapping_complete_for_ft = {'cpp': {'(': '()', '<': '<'}}
<
                                          *g:complete_parameter_mapping_goto_next*
* g:complete_parameter_mapping_goto_next
This option set the goto to next paramater mapping. When this mapping was called,
it'll goto to the next parameter.  
Default: '<c-j>'  >
  let g:complete_parameter_mapping_goto_next = '<c-j>'
<
                                             *g:complete_parameter_goto_next_mode*
* g:complete_parameter_goto_next_mode
This option set the mapping |g:complete_parameter_mapping_goto_next| mode. 
For example, the value is 'iv', it'll only map 
|g:complete_parameter_mapping_goto_next| in the mode of insert and visual(select).
Default: 'ivn' >
  let g:complete_parameter_goto_next_mode = 'ivn'
<
                                      *g:complete_parameter_mapping_goto_previous*
* g:complete_parameter_mapping_goto_previous
This option set the goto to previous paramater mapping. When this mapping was called,
it'll goto to the previous parameter.  
Default: '<c-k>'  >
  let g:complete_parameter_mapping_goto_previous = '<c-k>'
<
                                         *g:complete_parameter_goto_previous_mode*
* g:complete_parameter_goto_previous_mode
This option set the mapping |g:complete_parameter_mapping_goto_previous| mode. 
For example, the value is 'iv', it'll only map 
|g:complete_parameter_mapping_goto_previous| in the mode of insert and visual(select).
Default: 'ivn' >
  let g:complete_parameter_goto_previous_mode = 'ivn'
<
                                      *g:complete_parameter_mapping_overload_down*
* g:complete_parameter_mapping_overload_down
This option set the select next overload parameters mapping. When this 
mapping was called, it'll delete the current completed paramaters and insert
the next overload parameters. It works only the cursor in the current 
completed parameters. For example, `v.erase(__first, __last)`, only the cursor 
in the `(` and `)`, it can be work. 
Default: '<m-d>' >
  let g:complete_parameter_mapping_overload_down = '<m-d>'
<
                                 *g:complete_parameter_mapping_overload_down_mode*
* g:complete_parameter_mapping_overload_down_mode
This option set the mapping |g:complete_parameter_mapping_overload_down| mode. 
For example, the value is 'iv', it'll only map 
|g:complete_parameter_mapping_overload_down| in the mode of insert and visual(select).
Default: 'ivn' >
  let g:complete_parameter_mapping_overload_down_mode = 'ivn'
<
                                        *g:complete_parameter_mapping_overload_up*
* g:complete_parameter_mapping_overload_up
This option set the select previous overload parameters mapping. When this 
mapping was called, it'll delete the current completed paramaters and insert
the previous overload parameters. It works only the cursor in the current 
completed parameters. For example, `v.erase(__first, __last)`, only the cursor 
in the `(` and `)`, it can be work. 
Default: '<m-u>' >
  let g:complete_parameter_mapping_overload_up = '<m-u>'
<
                                   *g:complete_parameter_mapping_overload_up_mode*
* g:complete_parameter_mapping_overload_up_mode
This option set the mapping |g:complete_parameter_mapping_overload_up| mode. 
For example, the value is 'iv', it'll only map 
|g:complete_parameter_mapping_overload_up| in the mode of insert and visual(select).
Default: 'ivn' >
  let g:complete_parameter_mapping_overload_up_mode = 'ivn'
<
                                                  *g:complete_parameter_log_level*
* g:complete_parameter_log_level
This option set the log level.  
4: only print **error** log. 
2: print **error** and **debug** log.
1: print **error**, **debug**, **trace**
Default: 4 >
  let g:complete_parameter_log_level = 4
<

================================================================================
5. Event                                                *complete-parameter-event*
                                                         *CompleteParameterFailed*
* User CompleteParameterFailed
When complete failed, this event will be toggle. And the variable 
`g:complete_parameter_last_failed_insert` was assigned the inserted value. 
Eg: >
  autocmd User CompleteParameterFailed if g:complete_parameter_last_failed_insert ==# '()' | call feedkeys("\<LEFT>", 'n') | endif
<

================================================================================
6. Writing Extensions                              *complete-parameter-extensions*
It's easy to writing extensions for languages. 
Follow the next steps. All commands below was work in this plugin directory. 
1) Create a file named `filetype.vim` in path `cm_parser`. For example,
   write extension for golang. >
   touch cm_parser/go.vim
<
2) Create function: `cm_parser#filetype#parameters(completed_item)`
   This is the most important function.
   The parameter `completed_item` is a copy of |v:completed_item|.
   This function will parse the complete info from the `completed_item` and
   return the parameters you need to completed.  
   The return must be a list of strings. So the overwrite functions can be returned.

   For example, a go function like 
   `func Dial(network string, address string) (net.Conn, error)`
   The function message was stored in the `menu` field of `completed_item`
   The go no support overwrite. So the result is `['(network, address)']`

   For another example, the std::vector::erase functor of c++, there are two
   overwrite functions. The message was stored in the `info` field of
   `completed_item`
   `iterator erase( const_iterator __position )`
   `iterator erase( const_iterator __first, const_iterator __last )`
   This function will return: `['(__position)', '(__first, __last)']`

3) Create function `cm_parser#filetype#parameter_delim()`
   This function return the delim of parameters. For example, the go and c++
   will return ','

4) Create function `cm_parser#filetype#parameter_begin()`
   This function return the border begin of the parameters. For example, the go 
   will return '('. C++ will return '(<', the '<' is the beginning of 
   template parameters.

5) Create function `cm_parser#filetype#parameter_end()`
   This function return the border end of the parameters. For example, the go 
   will return ')'. C++ will return ')>', the '>' is ending of 
   template parameters.
   The length of `cm_parser#filetype#parameter_begin()` and 
   `cm_parser#filetype#parameter_end()` must be equal. Each char of them must 
   be match. For example, the the first char of begin is '(', the first of end
   must be ')'. 
   
6) Please write unittest for your function `cm_parser#filetype#parameters` 
   use [vader](https://github.com/junegunn/vader.vim) test framework. And put 
   the unittest in the `vader` directory. This is optional. But if you would
   send a pull request, this is required. 

Finally, please send a pull request for me if you would like to share you
extension.

================================================================================
7. FAQ                                                    *complete-parameter-faq*
1) Can't work with plugin auto-pairs use the default mapping `(`
Because the auto-pairs use `inoremap` to mapping the keys. It can't call this
plugin after the auto-pairs process. You can add the following setting to you
.vimrc, and it'll work well.  >
  let g:AutoPairs = {'[':']', '{':'}',"'":"'",'"':'"', '`':'`'}
  inoremap <buffer><silent> ) <C-R>=AutoPairsInsert(')')<CR>
<

2) How to accept the selected function but not parameters
You can type `<c-y>` key to accept the selected function and stop completion.
When the popup menu is disappeared, the parameters will not be insert. 


3) The mapping `<c-j>` doesn't jump to the next parameter, but delete the
   selected words. 
If you use neosnippet, Please set `g:neosnippet#disable_select_mode_mappings`
to 0. It will remove all select mappings. 
If you don't use neosnippet, please send me a issue, and give me the plugins
you are using. 



================================================================================
8. Contributions                                  *complete-parameter-contributes*
Contributions and pull requests are welcome.

================================================================================
9. Thanks                                              *complete-parameter-thanks*
- [johnzeng](https://github.com/johnzeng), support erlang

================================================================================
10. LICENSE                                           *complete-parameter-license*
MIT License Copyright (c) 2017 tenfyzhong

" vim:ft=help:iskeyword+=-:iskeyword+=58:iskeyword+=#
